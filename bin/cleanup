#!/usr/bin/env bash

# % cleanup(1) LICENSE: MIT | Dotfile Utilities
# % Mike Henderson <https://github.com/mvhenderson/dotfiles>
# % August 8, 2014
#
# NAME
# ====
#
# __cleanup__ - Perform cleanup operations
#
# USAGE
# =====
#
# __cleanup__ [options]
#
# OPTIONS
# =======
#
# __npm__             clear the npm cache
#
# __brew__            clear brew downloads
#
# __cask__            clear cask downloads
#
# __trash__           empty trash
#
# __logs__            delete system logs (improves shell startup speed)
#
# __file[=pattern]__  recurively delete files matching pattern, defaults to
#                     .DS_Store
#
# __dns__             flush DNS cache
#
# __launch__          Clean up LaunchServices to remove duplicates in the
#                     "Open With" menu
#
# __all__             clean all of the above
#
# __--dry-run__       Runs the cleaner(s) without making any changes
#
# __-h, --help__      Print this help text
#
#
# EXAMPLES
# ========
#
#     # Dry run for all
#     cleanup --dry-run all
#
#     # Just brew and cask
#     cleanup brew cask
#
#     # All dump files under current dir
#     cleanup file=*.dump
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

show-help "$1" "$BASH_SOURCE" true  && exit

source "${DOTFILES_DIR}/lib/sys"
source "${DOTFILES_DIR}/lib/io"
source "${DOTFILES_DIR}/lib/colors"
setup_os

declare -A cleaners=(
    [npm]=false
    [brew]=false
    [cask]=false
    [trash]=false
    [logs]=false
    [ds]=false
    [dns]=false
    [launch]=false
)

dry_run=;
for opt in $@; do  #TODO: will not support spaces in pattern for file=pattern
    case $opt in
        npm)        cleaners[$opt]=true ;;
        brew)       cleaners[$opt]=true ;;
        cask)       cleaners[$opt]=true ;;
        dns)        cleaners[$opt]=true ;;
        launch)     cleaners[$opt]=true ;;
        file*)
            cleaners[file]=true
            pattern="${opt#*=}"
            if [[ $pattern == $opt ]]; then pattern="*.DS_Store"; fi;
            ;;
        trash)
            cleaners[$opt]=true
            setup_sudo true
            ;;
        logs)
            cleaners[$opt]=true
            setup_sudo true
            ;;
        all)
            for cleaner in "${!cleaners[@]}"; do cleaners[$cleaner]=true; done
            setup_sudo true
            ;;
        --dry-run)  dry_run=log_dryrun ;;
        -*|--*) log_warning "Warning: invalid option $opt" ;;
    esac
done

for cleaner in "${!cleaners[@]}"; do
    if ${cleaners[$cleaner]}; then
        case $cleaner in
            npm)
                $dry_run npm cache clean
                ;;
            brew)
                $dry_run brew cleanup
                ;;
            cask)
                $dry_run brew cask cleanup
                ;;
            trash)
                $dry_run sudo rm -rfv /Volumes/*/.Trashes
                $dry_run sudo rm -rfv ~/.Trash
                ;;
            logs)
                $dry_run sudo rm -rfv /private/var/log/asl/*.asl
                ;;
            file)
                $dry_run find . -type f -name "$pattern" -ls -delete
                ;;
            dns)
                $dry_run dscacheutil -flushcache \
                && $dry_run killall -HUP mDNSResponder
                ;;
            launch)
                $dry_run /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user \
                && $dry_run killall Finder
                ;;
        esac
    fi
done


unset dry_run cleaners show_help
