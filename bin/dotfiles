#!/usr/bin/env bash

# % dotfiles(1) LICENSE: MIT | Dotfile Utilities
# % Mike Henderson <https://github.com/mvhenderson/dotfiles>
# % August 7, 2014
#
# NAME
# ====
#
# __dotfiles__ - Sync dotfiles and install apps/packages
#
# USAGE
# =====
#
# __dotfiles__ [options]
#
# OPTIONS
# =======
#
# __--dry-run__  Runs the installer without making any changes
#
# __--no-sync__  Suppress pulling from the remote repository
#
# __-h,--help__  Print this help text
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_REPOSITORY="mvhenderson/dotfiles"

DOTFILES_GIT_TARBALL="https://github.com/${DOTFILES_REPOSITORY}/tarball/master"
DOTFILES_GIT_REMOTE="git@github.com:${DOTFILES_REPOSITORY}.git"

# Ensure not running as root
if [ $EUID == 0 ]; then
    echo "Do not run as root. Aborting."
    exit
fi

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
    printf "Initializing directory ${DOTFILES_DIRECTORY}..."

    tmpfile="${TMPDIR:-${TEMP:-/tmp}}/dotfiles.tgz"

    mkdir "${DOTFILES_DIRECTORY}" || exit
    curl -fsSLo "${tmpfile}" ${DOTFILES_GIT_TARBALL} || exit
    tar -zxf "${tmpfile}" --strip-components 1 -C "${DOTFILES_DIRECTORY}"
    rm -f "${tmpfile}"

    if [ ! -x "${DOTFILES_DIRECTORY}/bin/dotfiles" ]; then
        printf "FAILED\n"
        exit
    fi
    printf "done\n"
    unset tmpfile
fi

# Load the library functions
cd ${DOTFILES_DIRECTORY}
for f in ./lib/*; do
    source $f || exit
done

# Parse command line options
is_dry_run=false
dry_run=;
for opt in $@; do
    case $opt in
        --dry-run)
            is_dry_run=true
            dry_run=log_dryrun
            ;;
        --no-sync) no_sync=true ;;
        -h|--help)
            bin/show-help "$opt" "$BASH_SOURCE"
            exit
            ;;
        -*|--*) log_warning "Warning: invalid option $opt" ;;
    esac
done

# Set the $os and $distro variables
setup_os

# Ask for sudo, if needed, and keep alive
setup_sudo

# Pull name/email from gitconfig otherwise prompt
if have_gitconfig; then
    read_gitconfig
else
    prompt_gitconfig
    write_gitconfig
fi

log_header "Prerequsites"
check_build_tools
check_package_manager
check_ssh
check_github_ssh
check_git
check_git_repo

if [[ ! $no_sync ]]; then
    log_header "Synchronizing repository"
    git_sync
fi

log_header "Package Install"
run_packages

log_header "Module Install"
run_npm

log_header "Link"
run_link

log_header "Misc"
write_gitconfig
configure_shell

if [[ $os == "osx" ]]; then
    if [[ -e ~/Library/Colors/solarized.clr ]]; then
        log_neutral "Solarized color palette already exists"
    else
        $dry_run mkdir -p ~/Library/Colors
        $dry_run cp -f "conf/solarized.clr" "~/Library/Colors" \
            && log_success "Copied solarized color palette" \
            || log_error "Failed to copy solarized color palette"
    fi
fi

log_summary

# restart
exec $SHELL -l
