#!/usr/bin/env bash
# Initialize/sync dotfiles clone and install apps/packages

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_REPOSITORY="mvhenderson/dotfiles"

DOTFILES_GIT_TARBALL="https://github.com/${DOTFILES_REPOSITORY}/tarball/master"
DOTFILES_GIT_REMOTE="git@github.com:${DOTFILES_REPOSITORY}.git"

# Ensure not running as root
if [ $EUID == 0 ]; then
    echo "Do not run as root. Aborting."
    exit
fi

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
    printf "Initializing directory ${DOTFILES_DIRECTORY}..."

    tmpfile="${TMPDIR:-${TEMP:-/tmp}}/dotfiles.tgz"

    mkdir "${DOTFILES_DIRECTORY}" || exit
    curl -fsSLo "${tmpfile}" ${DOTFILES_GIT_TARBALL} || exit
    tar -zxf "${tmpfile}" --strip-components 1 -C "${DOTFILES_DIRECTORY}"
    rm -f "${tmpfile}"

    if [ ! -x "${DOTFILES_DIRECTORY}/bin/dotfiles" ]; then
        printf "FAILED\n"
        exit
    fi
    printf "done\n"
    unset tmpfile
fi

# Load the library functions
cd ${DOTFILES_DIRECTORY}
for f in ./lib/*; do
    source $f || exit
done

# Parse command line options
is_dry_run=false
dry_run=;
for opt in $@; do
    case $opt in
        --dry-run)
            is_dry_run=true
            dry_run=log_dryrun
            ;;
        --no-modules) no_modules=true ;;
        --no-packages) no_packages=true ;;
        --no-link) no_link=true ;;
        --no-sync) no_sync=true ;;
        -h|--help) run_help ;;
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

# Set the $os and $distro variables
setup_os

# Ask for sudo, if needed, and keep alive
check_sudo

if have_gitconfig; then
    read_gitconfig
else
    prompt_gitconfig
fi

log_header "Prerequsites"
check_build_tools
check_package_manager
check_ssh
check_github_ssh
check_git
check_git_repo

if [[ ! $no_sync ]]; then
    log_header "Synchronizing repository"
    git_sync
fi

if [[ ! $no_packages ]]; then
    log_header "Install Packages"
    run_packages
fi

if [[ ! $no_modules ]]; then
    log_header "Install Modules"
    run_npm
fi

if [[ ! $no_link ]]; then
    log_header "Linking"
    run_link
    write_gitconfig
fi

log_summary

