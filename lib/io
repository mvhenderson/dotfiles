#!/usr/bin/env bash

# Logging
declare -i error_count=0
declare -i warning_count=0
CLEAR_LINE="\r\e[0K"

log_summary() {
    printf "\n"
    $is_dry_run && printf "${violet}Dry run, no changes made\n"

    if [[ $error_count > 0 ]]; then
        printf "${red}Done. Errors: ${error_count}"
    elif [[ $warning_count > 0 ]]; then
        printf "${yellow}Done. Warnings: ${warning_count}"
    else
        printf "${green}Done"
    fi
    printf "${reset}\n"
}
log_header() {
    printf "\n$@${reset}\n"
}
log_success() {
    printf "${CLEAR_LINE} ${green}✔${reset}  $@\n"
}
log_neutral() {
    printf "${CLEAR_LINE} ${blue}-${reset}  $@\n"
}
log_warning() {
    let "warning_count++"
    printf "${CLEAR_LINE} ${yellow}!${reset}  $@\n"
}
log_error() {
    let "error_count++"
    printf "${CLEAR_LINE} ${red}✖${reset}  $@\n"
}
log_step() {
    printf "${CLEAR_LINE}    $@\n"
}
log_info() {
    printf "    $@\n"
}
log_fatal() {
    printf "\n${red}$@${reset}\n"
    exit
}
log_question() {
    printf "    ${cyan}$@${reset}"
}
log_dryrun() {
    echo -e "    ${violet}$@${reset}"
}

# Ask for string input
ask() {
    log_question "$@ > "
    read
}

# Get the last answer
get_answer() {
    printf "$REPLY"
}

# Ask for confirmation before proceeding
ask_confirmation() {
    log_question "$@ (y/n) "
    read -n 1
    printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
is_confirmed() {
    if [[ "$REPLY" =~ ^[Yy]$ ]]; then
        return 0
    fi
    return 1
}

# Ask for any input to continue
ask_anykey() {
    log_question "<< Press any key to continue, Ctrl-C to exit >>"
    read -n 1
    printf "\n"
}
